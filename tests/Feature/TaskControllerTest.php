<?php

namespace Tests\Feature;

use App\Model\Bookmark;
use App\Model\Category;
use App\Model\Like;
use App\Model\Question;
use App\Model\Reply;
use App\Model\Task;
use App\User;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class TaskControllerTest extends TestCase
{
    use RefreshDatabase;

    private $user;
    private $bookmark1;
    private $bookmark2;
    private $dummy1task1;
    private $dummy1task2;
    private $dummy2task1;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = $this->signIn();
        $category = factory(Category::class, 1)->create()->first();
        $this->bookmark1 = Bookmark::create([
            "user_id" => $this->user->id,
            "name" => "dummy1"
        ]);
        $this->bookmark2 = Bookmark::create([
            "user_id" => $this->user->id,
            "name" => "dummy2"
        ]);
        $question1 = factory(Question::class, 1)->create([
            "user_id" => $this->user->id,
            "category_id"=>$category->id
        ])->first();
        $question2 = factory(Question::class, 1)->create([
            "user_id" => $this->user->id,
            "category_id"=>$category->id
        ])->first();
        $question3 = factory(Question::class, 1)->create([
            "user_id" => $this->user->id,
            "category_id"=>$category->id
        ])->first();
        $this->dummy1task1 = Task::create([
            "bookmark_id" => $this->bookmark1->id,
            "question_id" => $question1->id,
            "order" => 1
        ]);
        $this->dummy1task2 = Task::create([
            "bookmark_id" => $this->bookmark1->id,
            "question_id" => $question2->id,
            "order" => 2
        ]);
        $this->dummy2task1 = Task::create([
            "bookmark_id" => $this->bookmark2->id,
            "question_id" => $question3->id,
            "order" => 1
        ]);
    }

    /** @test */
    public function it_can_update_to_another_bookmark()
    {
        //ここのfromTaskとtoTaskはbookmarkのこと,bookmark_idとtoTask_idは一緒のやつっぽい
        //bookmark 1    bookmark2
        //task1         task3
        //task2
        //となっているものを
        //bookmark 1    bookmark2
        //task2         task3
        //              task1
        //とする

        //bookmark1のorder１であるtask1をbookmark2に移動する
        //orderがtask2は2→1に、task1は1→2になっていればいい、そしてtask1の所属かbookmark2に
        //実際にはorderの計算はフロント側でやっている
        $data = [

            "fromTask_id" => $this->bookmark1->id,
            "toTask_id" => $this->bookmark2->id,
            "oldPosition" => 1,
            "newPosition" => 2
        ];
        $this->patch("/api/task/".$this->dummy1task1->id, $data);

        self::assertEquals(1,$this->dummy2task1->fresh()->order);
        self::assertEquals(2,$this->dummy1task1->fresh()->order);
        self::assertEquals($this->bookmark2->id,$this->dummy1task1->fresh()->bookmark_id);


    }

    /** @test */
    public function it_can_update_in_same_bookmark()
    {

        //bookmark 1
        //task1
        //task2
        //となっているものを
        //bookmark 1
        //task2
        //task1
        //とする


        $data = [

            "fromTask_id" => $this->bookmark1->id,
            "toTask_id" => $this->bookmark1->id,
            "oldPosition" => 1,
            "newPosition" => 2
        ];
        $this->patch("/api/task/".$this->dummy1task1->id, $data);

        self::assertEquals(1,$this->dummy1task2->fresh()->order);
        self::assertEquals(2,$this->dummy1task1->fresh()->order);
        self::assertCount(2,Task::where("bookmark_id",$this->bookmark1->id)->get());


    }

    /** @test */
    public function it_can_update_in_same_bookmark_reverse_order()
    {

        //bookmark 1
        //task1
        //task2
        //となっているものを
        //bookmark 1
        //task2
        //task1
        //とする


        $data = [

            "fromTask_id" => $this->bookmark1->id,
            "toTask_id" => $this->bookmark1->id,
            "oldPosition" => 2,
            "newPosition" => 1
        ];
        $this->patch("/api/task/".$this->dummy1task2->id, $data);

        self::assertEquals(1,$this->dummy1task2->fresh()->order);
        self::assertEquals(2,$this->dummy1task1->fresh()->order);
        self::assertCount(2,Task::where("bookmark_id",$this->bookmark1->id)->get());


    }
}
